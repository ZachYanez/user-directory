{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/zacharyyanez/bootcamp/user-directory/user-directory/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport API from \"../utils/api\";\n\nclass Ap extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      search: \"\",\n      users: [{}],\n      results: [],\n      error: \"\"\n    };\n\n    this.handleInputChange = event => {\n      this.setState({\n        search: event.target.value\n      });\n    };\n\n    this.handleFormSubmit = event => {\n      event.preventDefault();\n      API.getRandomUsers(this.state.search).then(res => {\n        if (res.data.status === \"error\") {\n          throw new Error(res.data.message);\n        }\n\n        this.setState({\n          results: res.data.message,\n          error: \"\"\n        });\n      }).catch(err => this.setState({\n        error: err.message\n      }));\n    };\n  }\n\n  // When the component mounts, get a list of all available users and update this.state.users\n  componentDidMount() {\n    API.getRandomUsers().then(res => {\n      this.setState({\n        users: res.data.message\n      });\n      console.log(res.data);\n    }).catch(err => console.log(err));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"testing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/Users/zacharyyanez/bootcamp/user-directory/user-directory/src/components/App.js"],"names":["React","Component","API","Ap","state","search","users","results","error","handleInputChange","event","setState","target","value","handleFormSubmit","preventDefault","getRandomUsers","then","res","data","status","Error","message","catch","err","componentDidMount","console","log","render","Main"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,cAAhB;;AAGA,MAAMC,EAAN,SAAiBF,SAAjB,CAA2B;AAAA;AAAA;AAAA,SACvBG,KADuB,GACf;AACJC,MAAAA,MAAM,EAAE,EADJ;AAEJC,MAAAA,KAAK,EAAE,CAAC,EAAD,CAFH;AAGJC,MAAAA,OAAO,EAAE,EAHL;AAIJC,MAAAA,KAAK,EAAE;AAJH,KADe;;AAAA,SAkBvBC,iBAlBuB,GAkBHC,KAAK,IAAI;AACzB,WAAKC,QAAL,CAAc;AAAEN,QAAAA,MAAM,EAAEK,KAAK,CAACE,MAAN,CAAaC;AAAvB,OAAd;AACH,KApBsB;;AAAA,SAsBvBC,gBAtBuB,GAsBJJ,KAAK,IAAI;AACxBA,MAAAA,KAAK,CAACK,cAAN;AACAb,MAAAA,GAAG,CAACc,cAAJ,CAAmB,KAAKZ,KAAL,CAAWC,MAA9B,EACKY,IADL,CACUC,GAAG,IAAI;AACT,YAAIA,GAAG,CAACC,IAAJ,CAASC,MAAT,KAAoB,OAAxB,EAAiC;AAC7B,gBAAM,IAAIC,KAAJ,CAAUH,GAAG,CAACC,IAAJ,CAASG,OAAnB,CAAN;AACH;;AACD,aAAKX,QAAL,CAAc;AAAEJ,UAAAA,OAAO,EAAEW,GAAG,CAACC,IAAJ,CAASG,OAApB;AAA6Bd,UAAAA,KAAK,EAAE;AAApC,SAAd;AACH,OANL,EAOKe,KAPL,CAOWC,GAAG,IAAI,KAAKb,QAAL,CAAc;AAAEH,QAAAA,KAAK,EAAEgB,GAAG,CAACF;AAAb,OAAd,CAPlB;AAQH,KAhCsB;AAAA;;AAQvB;AACAG,EAAAA,iBAAiB,GAAG;AAChBvB,IAAAA,GAAG,CAACc,cAAJ,GACKC,IADL,CACUC,GAAG,IAAI;AACT,WAAKP,QAAL,CAAc;AAAEL,QAAAA,KAAK,EAAEY,GAAG,CAACC,IAAJ,CAASG;AAAlB,OAAd;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYT,GAAG,CAACC,IAAhB;AACH,KAJL,EAKKI,KALL,CAKWC,GAAG,IAAIE,OAAO,CAACC,GAAR,CAAYH,GAAZ,CALlB;AAMH;;AAiBDI,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAvCsB;;AA0C3B,eAAeC,IAAf","sourcesContent":["import React, { Component } from \"react\";\nimport API from \"../utils/api\";\n\n\nclass Ap extends Component {\n    state = {\n        search: \"\",\n        users: [{}],\n        results: [],\n        error: \"\" \n    };\n\n    // When the component mounts, get a list of all available users and update this.state.users\n    componentDidMount() {\n        API.getRandomUsers()\n            .then(res => {\n                this.setState({ users: res.data.message })\n                console.log(res.data)\n            })\n            .catch(err => console.log(err));\n    }\n\n    handleInputChange = event => {\n        this.setState({ search: event.target.value });\n    };\n\n    handleFormSubmit = event => {\n        event.preventDefault();\n        API.getRandomUsers(this.state.search)\n            .then(res => {\n                if (res.data.status === \"error\") {\n                    throw new Error(res.data.message);\n                }\n                this.setState({ results: res.data.message, error: \"\" });\n            })\n            .catch(err => this.setState({ error: err.message }));\n    };\n    render() {\n        return (\n            <div>\n                <h1>testing</h1>\n            </div>\n        );\n    }\n}\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}